import type { BooleanLicenseFeature } from '@n8n/constants';
import type { FeatureReturnType, LicenseProvider } from './types';
export declare class LicenseState {
    licenseProvider: LicenseProvider | null;
    setLicenseProvider(provider: LicenseProvider): void;
    private assertProvider;
    isLicensed(feature: BooleanLicenseFeature): boolean;
    getValue<T extends keyof FeatureReturnType>(feature: T): FeatureReturnType[T];
    isCustomRolesLicensed(): boolean;
    isSharingLicensed(): boolean;
    isLogStreamingLicensed(): boolean;
    isLdapLicensed(): boolean;
    isSamlLicensed(): boolean;
    isOidcLicensed(): boolean;
    isMFAEnforcementLicensed(): boolean;
    isApiKeyScopesLicensed(): boolean;
    isAiAssistantLicensed(): boolean;
    isAskAiLicensed(): boolean;
    isAiCreditsLicensed(): boolean;
    isAdvancedExecutionFiltersLicensed(): boolean;
    isAdvancedPermissionsLicensed(): boolean;
    isDebugInEditorLicensed(): boolean;
    isBinaryDataS3Licensed(): boolean;
    isMultiMainLicensed(): boolean;
    isVariablesLicensed(): boolean;
    isSourceControlLicensed(): boolean;
    isExternalSecretsLicensed(): boolean;
    isWorkflowHistoryLicensed(): boolean;
    isAPIDisabled(): boolean;
    isWorkerViewLicensed(): boolean;
    isProjectRoleAdminLicensed(): boolean;
    isProjectRoleEditorLicensed(): boolean;
    isProjectRoleViewerLicensed(): boolean;
    isCustomNpmRegistryLicensed(): boolean;
    isFoldersLicensed(): boolean;
    isInsightsSummaryLicensed(): boolean;
    isInsightsDashboardLicensed(): boolean;
    isInsightsHourlyDataLicensed(): boolean;
    isWorkflowDiffsLicensed(): boolean;
    getMaxUsers(): number;
    getMaxActiveWorkflows(): number;
    getMaxVariables(): number;
    getMaxAiCredits(): number;
    getWorkflowHistoryPruneQuota(): number;
    getInsightsMaxHistory(): number;
    getInsightsRetentionMaxAge(): number;
    getInsightsRetentionPruneInterval(): number;
    getMaxTeamProjects(): number;
    getMaxWorkflowsWithEvaluations(): number;
}
