export * from './api';
export * from './browser';
export * from './community-nodes';
export * from './instance';
export * from './execution';
export declare const LICENSE_FEATURES: {
    readonly SHARING: "feat:sharing";
    readonly LDAP: "feat:ldap";
    readonly SAML: "feat:saml";
    readonly OIDC: "feat:oidc";
    readonly MFA_ENFORCEMENT: "feat:mfaEnforcement";
    readonly LOG_STREAMING: "feat:logStreaming";
    readonly ADVANCED_EXECUTION_FILTERS: "feat:advancedExecutionFilters";
    readonly VARIABLES: "feat:variables";
    readonly SOURCE_CONTROL: "feat:sourceControl";
    readonly API_DISABLED: "feat:apiDisabled";
    readonly EXTERNAL_SECRETS: "feat:externalSecrets";
    readonly SHOW_NON_PROD_BANNER: "feat:showNonProdBanner";
    readonly WORKFLOW_HISTORY: "feat:workflowHistory";
    readonly DEBUG_IN_EDITOR: "feat:debugInEditor";
    readonly BINARY_DATA_S3: "feat:binaryDataS3";
    readonly MULTIPLE_MAIN_INSTANCES: "feat:multipleMainInstances";
    readonly WORKER_VIEW: "feat:workerView";
    readonly ADVANCED_PERMISSIONS: "feat:advancedPermissions";
    readonly PROJECT_ROLE_ADMIN: "feat:projectRole:admin";
    readonly PROJECT_ROLE_EDITOR: "feat:projectRole:editor";
    readonly PROJECT_ROLE_VIEWER: "feat:projectRole:viewer";
    readonly AI_ASSISTANT: "feat:aiAssistant";
    readonly ASK_AI: "feat:askAi";
    readonly COMMUNITY_NODES_CUSTOM_REGISTRY: "feat:communityNodes:customRegistry";
    readonly AI_CREDITS: "feat:aiCredits";
    readonly FOLDERS: "feat:folders";
    readonly INSIGHTS_VIEW_SUMMARY: "feat:insights:viewSummary";
    readonly INSIGHTS_VIEW_DASHBOARD: "feat:insights:viewDashboard";
    readonly INSIGHTS_VIEW_HOURLY_DATA: "feat:insights:viewHourlyData";
    readonly API_KEY_SCOPES: "feat:apiKeyScopes";
    readonly WORKFLOW_DIFFS: "feat:workflowDiffs";
    readonly CUSTOM_ROLES: "feat:customRoles";
};
export declare const LICENSE_QUOTAS: {
    readonly TRIGGER_LIMIT: "quota:activeWorkflows";
    readonly VARIABLES_LIMIT: "quota:maxVariables";
    readonly USERS_LIMIT: "quota:users";
    readonly WORKFLOW_HISTORY_PRUNE_LIMIT: "quota:workflowHistoryPrune";
    readonly TEAM_PROJECT_LIMIT: "quota:maxTeamProjects";
    readonly AI_CREDITS: "quota:aiCredits";
    readonly INSIGHTS_MAX_HISTORY_DAYS: "quota:insights:maxHistoryDays";
    readonly INSIGHTS_RETENTION_MAX_AGE_DAYS: "quota:insights:retention:maxAgeDays";
    readonly INSIGHTS_RETENTION_PRUNE_INTERVAL_DAYS: "quota:insights:retention:pruneIntervalDays";
    readonly WORKFLOWS_WITH_EVALUATION_LIMIT: "quota:evaluations:maxWorkflows";
};
export declare const UNLIMITED_LICENSE_QUOTA = -1;
export type BooleanLicenseFeature = (typeof LICENSE_FEATURES)[keyof typeof LICENSE_FEATURES];
export type NumericLicenseFeature = (typeof LICENSE_QUOTAS)[keyof typeof LICENSE_QUOTAS];
export declare const LDAP_FEATURE_NAME = "features.ldap";
export type ConnectionSecurity = 'none' | 'tls' | 'startTls';
export interface LdapConfig {
    loginEnabled: boolean;
    loginLabel: string;
    connectionUrl: string;
    allowUnauthorizedCerts: boolean;
    connectionSecurity: ConnectionSecurity;
    connectionPort: number;
    baseDn: string;
    bindingAdminDn: string;
    bindingAdminPassword: string;
    firstNameAttribute: string;
    lastNameAttribute: string;
    emailAttribute: string;
    loginIdAttribute: string;
    ldapIdAttribute: string;
    userFilter: string;
    synchronizationEnabled: boolean;
    synchronizationInterval: number;
    searchPageSize: number;
    searchTimeout: number;
}
export declare const LDAP_DEFAULT_CONFIGURATION: LdapConfig;
export { Time } from './time';
export declare const MIN_PASSWORD_CHAR_LENGTH = 8;
export declare const MAX_PASSWORD_CHAR_LENGTH = 64;
