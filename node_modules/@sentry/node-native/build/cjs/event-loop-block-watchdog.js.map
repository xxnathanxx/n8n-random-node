{"version":3,"file":"event-loop-block-watchdog.js","sources":["../../src/event-loop-block-watchdog.ts"],"sourcesContent":["import { workerData } from 'node:worker_threads';\nimport type { DebugImage, Event, Session, StackFrame, Thread } from '@sentry/core';\nimport {\n  createEventEnvelope,\n  createSessionEnvelope,\n  filenameIsInApp,\n  getEnvelopeEndpointWithUrlEncodedAuth,\n  makeSession,\n  normalizeUrlToBase,\n  stripSentryFramesAndReverse,\n  updateSession,\n  uuid4,\n} from '@sentry/core';\nimport { makeNodeTransport } from '@sentry/node';\nimport { captureStackTrace, getThreadsLastSeen } from '@sentry-internal/node-native-stacktrace';\nimport type { ThreadState, WorkerStartData } from './common';\nimport { POLL_RATIO } from './common';\n\nconst {\n  threshold,\n  appRootPath,\n  contexts,\n  debug,\n  dist,\n  dsn,\n  environment,\n  maxEventsPerHour,\n  release,\n  sdkMetadata,\n  staticTags: tags,\n  tunnel,\n} = workerData as WorkerStartData;\n\nconst pollInterval = threshold / POLL_RATIO;\nconst triggeredThreads = new Set<string>();\n\nfunction log(...msg: unknown[]): void {\n  if (debug) {\n    // eslint-disable-next-line no-console\n    console.log('[Sentry Event Loop Blocked Watchdog]', ...msg);\n  }\n}\n\nfunction createRateLimiter(maxEventsPerHour: number): () => boolean {\n  let currentHour = 0;\n  let currentCount = 0;\n\n  return function isRateLimited(): boolean {\n    const hour = new Date().getHours();\n\n    if (hour !== currentHour) {\n      currentHour = hour;\n      currentCount = 0;\n    }\n\n    if (currentCount >= maxEventsPerHour) {\n      if (currentCount === maxEventsPerHour) {\n        currentCount += 1;\n        log(`Rate limit reached: ${currentCount} events in this hour`);\n      }\n      return true;\n    }\n\n    currentCount += 1;\n    return false;\n  };\n}\n\nconst url = getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkMetadata.sdk);\nconst transport = makeNodeTransport({\n  url,\n  recordDroppedEvent: () => {\n    //\n  },\n});\nconst isRateLimited = createRateLimiter(maxEventsPerHour);\n\nasync function sendAbnormalSession(serializedSession: Session | undefined): Promise<void> {\n  if (!serializedSession) {\n    return;\n  }\n\n  log('Sending abnormal session');\n  const session = makeSession(serializedSession);\n\n  updateSession(session, {\n    status: 'abnormal',\n    abnormal_mechanism: 'anr_foreground',\n    release,\n    environment,\n  });\n\n  const envelope = createSessionEnvelope(session, dsn, sdkMetadata, tunnel);\n  // Log the envelope so to aid in testing\n  log(JSON.stringify(envelope));\n\n  await transport.send(envelope);\n}\n\nlog('Started');\n\nfunction prepareStackFrames(stackFrames: StackFrame[] | undefined): StackFrame[] | undefined {\n  if (!stackFrames) {\n    return undefined;\n  }\n\n  // Strip Sentry frames and reverse the stack frames so they are in the correct order\n  const strippedFrames = stripSentryFramesAndReverse(stackFrames);\n\n  for (const frame of strippedFrames) {\n    if (!frame.filename) {\n      continue;\n    }\n\n    frame.in_app = filenameIsInApp(frame.filename);\n\n    // If we have an app root path, rewrite the filenames to be relative to the app root\n    if (appRootPath) {\n      frame.filename = normalizeUrlToBase(frame.filename, appRootPath);\n    }\n  }\n\n  return strippedFrames;\n}\n\nfunction stripFileProtocol(filename: string | undefined): string | undefined {\n  if (!filename) {\n    return undefined;\n  }\n  return filename.replace(/^file:\\/\\//, '');\n}\n\n// eslint-disable-next-line complexity\nfunction applyDebugMeta(event: Event, debugImages: Record<string, string>): void {\n  if (Object.keys(debugImages).length === 0) {\n    return;\n  }\n\n  const normalisedDebugImages = appRootPath ? {} : debugImages;\n  if (appRootPath) {\n    for (const [path, debugId] of Object.entries(debugImages)) {\n      normalisedDebugImages[normalizeUrlToBase(path, appRootPath)] = debugId;\n    }\n  }\n\n  const filenameToDebugId = new Map<string, string>();\n\n  for (const exception of event.exception?.values || []) {\n    for (const frame of exception.stacktrace?.frames || []) {\n      const filename = stripFileProtocol(frame.abs_path || frame.filename);\n      if (filename && normalisedDebugImages[filename]) {\n        filenameToDebugId.set(filename, normalisedDebugImages[filename] as string);\n      }\n    }\n  }\n\n  for (const thread of event.threads?.values || []) {\n    for (const frame of thread.stacktrace?.frames || []) {\n      const filename = stripFileProtocol(frame.abs_path || frame.filename);\n      if (filename && normalisedDebugImages[filename]) {\n        filenameToDebugId.set(filename, normalisedDebugImages[filename] as string);\n      }\n    }\n  }\n\n  if (filenameToDebugId.size > 0) {\n    const images: DebugImage[] = [];\n    for (const [code_file, debug_id] of filenameToDebugId.entries()) {\n      images.push({\n        type: 'sourcemap',\n        code_file,\n        debug_id,\n      });\n    }\n    event.debug_meta = { images };\n  }\n}\n\nfunction getExceptionAndThreads(\n  crashedThreadId: string,\n  threads: ReturnType<typeof captureStackTrace<ThreadState>>,\n): Event {\n  const crashedThread = threads[crashedThreadId];\n\n  return {\n    exception: {\n      values: [\n        {\n          type: 'EventLoopBlocked',\n          value: `Event Loop Blocked for at least ${threshold} ms`,\n          stacktrace: { frames: prepareStackFrames(crashedThread?.frames) },\n          // This ensures the UI doesn't say 'Crashed in' for the stack trace\n          mechanism: { type: 'ANR' },\n          thread_id: crashedThreadId,\n        },\n      ],\n    },\n    threads: {\n      values: Object.entries(threads).map(([threadId, threadState]) => {\n        const crashed = threadId === crashedThreadId;\n\n        const thread: Thread = {\n          id: threadId,\n          name: threadId === '0' ? 'main' : `worker-${threadId}`,\n          crashed,\n          current: true,\n          main: threadId === '0',\n        };\n\n        if (!crashed) {\n          thread.stacktrace = { frames: prepareStackFrames(threadState.frames) };\n        }\n\n        return thread;\n      }),\n    },\n  };\n}\n\nasync function sendBlockEvent(crashedThreadId: string): Promise<void> {\n  if (isRateLimited()) {\n    return;\n  }\n\n  const threads = captureStackTrace<ThreadState>();\n  const crashedThread = threads[crashedThreadId];\n\n  if (!crashedThread) {\n    log(`No thread found with ID '${crashedThreadId}'`);\n    return;\n  }\n\n  try {\n    await sendAbnormalSession(crashedThread.state?.session);\n  } catch (error) {\n    log(`Failed to send abnormal session for thread '${crashedThreadId}':`, error);\n  }\n\n  log('Sending event');\n\n  const event: Event = {\n    event_id: uuid4(),\n    contexts,\n    release,\n    environment,\n    dist,\n    platform: 'node',\n    level: 'error',\n    tags,\n    ...getExceptionAndThreads(crashedThreadId, threads),\n  };\n\n  const allDebugImages: Record<string, string> = Object.values(threads).reduce((acc, threadState) => {\n    return { ...acc, ...threadState.state?.debugImages };\n  }, {});\n\n  applyDebugMeta(event, allDebugImages);\n\n  const envelope = createEventEnvelope(event, dsn, sdkMetadata, tunnel);\n  // Log the envelope to aid in testing\n  log(JSON.stringify(envelope));\n\n  await transport.send(envelope);\n  await transport.flush(2000);\n}\n\nsetInterval(async () => {\n  for (const [threadId, time] of Object.entries(getThreadsLastSeen())) {\n    if (time > threshold) {\n      if (triggeredThreads.has(threadId)) {\n        continue;\n      }\n\n      log(`Blocked thread detected '${threadId}' last polled ${time} ms ago.`);\n      triggeredThreads.add(threadId);\n\n      try {\n        await sendBlockEvent(threadId);\n      } catch (error) {\n        log(`Failed to send event for thread '${threadId}':`, error);\n      }\n    } else {\n      triggeredThreads.delete(threadId);\n    }\n  }\n}, pollInterval);\n"],"names":["workerData","POLL_RATIO","getEnvelopeEndpointWithUrlEncodedAuth","makeNodeTransport","makeSession","updateSession","createSessionEnvelope","stripSentryFramesAndReverse","filenameIsInApp","normalizeUrlToBase","captureStackTrace","uuid4","createEventEnvelope","getThreadsLastSeen"],"mappings":";;;;;;AAkBA,MAAM;AACN,EAAE,SAAS;AACX,EAAE,WAAW;AACb,EAAE,QAAQ;AACV,EAAE,KAAK;AACP,EAAE,IAAI;AACN,EAAE,GAAG;AACL,EAAE,WAAW;AACb,EAAE,gBAAgB;AAClB,EAAE,OAAO;AACT,EAAE,WAAW;AACb,EAAE,UAAU,EAAE,IAAI;AAClB,EAAE,MAAM;AACR,CAAA,GAAIA,8BAAA;;AAEJ,MAAM,YAAA,GAAe,SAAA,GAAYC,iBAAU;AAC3C,MAAM,gBAAA,GAAmB,IAAI,GAAG,EAAU;;AAE1C,SAAS,GAAG,CAAC,GAAG,GAAG,EAAmB;AACtC,EAAE,IAAI,KAAK,EAAE;AACb;AACA,IAAI,OAAO,CAAC,GAAG,CAAC,sCAAsC,EAAE,GAAG,GAAG,CAAC;AAC/D;AACA;;AAEA,SAAS,iBAAiB,CAAC,gBAAgB,EAAyB;AACpE,EAAE,IAAI,WAAA,GAAc,CAAC;AACrB,EAAE,IAAI,YAAA,GAAe,CAAC;;AAEtB,EAAE,OAAO,SAAS,aAAa,GAAY;AAC3C,IAAI,MAAM,IAAA,GAAO,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE;;AAEtC,IAAI,IAAI,IAAA,KAAS,WAAW,EAAE;AAC9B,MAAM,WAAA,GAAc,IAAI;AACxB,MAAM,YAAA,GAAe,CAAC;AACtB;;AAEA,IAAI,IAAI,YAAA,IAAgB,gBAAgB,EAAE;AAC1C,MAAM,IAAI,YAAA,KAAiB,gBAAgB,EAAE;AAC7C,QAAQ,YAAA,IAAgB,CAAC;AACzB,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,YAAY,CAAC,oBAAoB,CAAC,CAAC;AACtE;AACA,MAAM,OAAO,IAAI;AACjB;;AAEA,IAAI,YAAA,IAAgB,CAAC;AACrB,IAAI,OAAO,KAAK;AAChB,GAAG;AACH;;AAEA,MAAM,GAAA,GAAMC,0CAAqC,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,CAAC,GAAG,CAAC;AAC/E,MAAM,SAAA,GAAYC,sBAAiB,CAAC;AACpC,EAAE,GAAG;AACL,EAAE,kBAAkB,EAAE,MAAM;AAC5B;AACA,GAAG;AACH,CAAC,CAAC;AACF,MAAM,aAAA,GAAgB,iBAAiB,CAAC,gBAAgB,CAAC;;AAEzD,eAAe,mBAAmB,CAAC,iBAAiB,EAAsC;AAC1F,EAAE,IAAI,CAAC,iBAAiB,EAAE;AAC1B,IAAI;AACJ;;AAEA,EAAE,GAAG,CAAC,0BAA0B,CAAC;AACjC,EAAE,MAAM,OAAA,GAAUC,gBAAW,CAAC,iBAAiB,CAAC;;AAEhD,EAAEC,kBAAa,CAAC,OAAO,EAAE;AACzB,IAAI,MAAM,EAAE,UAAU;AACtB,IAAI,kBAAkB,EAAE,gBAAgB;AACxC,IAAI,OAAO;AACX,IAAI,WAAW;AACf,GAAG,CAAC;;AAEJ,EAAE,MAAM,QAAA,GAAWC,0BAAqB,CAAC,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,CAAC;AAC3E;AACA,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;;AAE/B,EAAE,MAAM,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChC;;AAEA,GAAG,CAAC,SAAS,CAAC;;AAEd,SAAS,kBAAkB,CAAC,WAAW,EAAsD;AAC7F,EAAE,IAAI,CAAC,WAAW,EAAE;AACpB,IAAI,OAAO,SAAS;AACpB;;AAEA;AACA,EAAE,MAAM,cAAA,GAAiBC,gCAA2B,CAAC,WAAW,CAAC;;AAEjE,EAAE,KAAK,MAAM,KAAA,IAAS,cAAc,EAAE;AACtC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AACzB,MAAM;AACN;;AAEA,IAAI,KAAK,CAAC,MAAA,GAASC,oBAAe,CAAC,KAAK,CAAC,QAAQ,CAAC;;AAElD;AACA,IAAI,IAAI,WAAW,EAAE;AACrB,MAAM,KAAK,CAAC,QAAA,GAAWC,uBAAkB,CAAC,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC;AACtE;AACA;;AAEA,EAAE,OAAO,cAAc;AACvB;;AAEA,SAAS,iBAAiB,CAAC,QAAQ,EAA0C;AAC7E,EAAE,IAAI,CAAC,QAAQ,EAAE;AACjB,IAAI,OAAO,SAAS;AACpB;AACA,EAAE,OAAO,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;AAC3C;;AAEA;AACA,SAAS,cAAc,CAAC,KAAK,EAAS,WAAW,EAAgC;AACjF,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAA,KAAW,CAAC,EAAE;AAC7C,IAAI;AACJ;;AAEA,EAAE,MAAM,wBAAwB,WAAA,GAAc,EAAC,GAAI,WAAW;AAC9D,EAAE,IAAI,WAAW,EAAE;AACnB,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE,OAAO,CAAA,IAAK,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AAC/D,MAAM,qBAAqB,CAACA,uBAAkB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA,GAAI,OAAO;AAC5E;AACA;;AAEA,EAAE,MAAM,iBAAA,GAAoB,IAAI,GAAG,EAAkB;;AAErD,EAAE,KAAK,MAAM,SAAA,IAAa,KAAK,CAAC,SAAS,EAAE,MAAA,IAAU,EAAE,EAAE;AACzD,IAAI,KAAK,MAAM,KAAA,IAAS,SAAS,CAAC,UAAU,EAAE,MAAA,IAAU,EAAE,EAAE;AAC5D,MAAM,MAAM,QAAA,GAAW,iBAAiB,CAAC,KAAK,CAAC,QAAA,IAAY,KAAK,CAAC,QAAQ,CAAC;AAC1E,MAAM,IAAI,QAAA,IAAY,qBAAqB,CAAC,QAAQ,CAAC,EAAE;AACvD,QAAQ,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,CAAA,EAAY;AAClF;AACA;AACA;;AAEA,EAAE,KAAK,MAAM,MAAA,IAAU,KAAK,CAAC,OAAO,EAAE,MAAA,IAAU,EAAE,EAAE;AACpD,IAAI,KAAK,MAAM,KAAA,IAAS,MAAM,CAAC,UAAU,EAAE,MAAA,IAAU,EAAE,EAAE;AACzD,MAAM,MAAM,QAAA,GAAW,iBAAiB,CAAC,KAAK,CAAC,QAAA,IAAY,KAAK,CAAC,QAAQ,CAAC;AAC1E,MAAM,IAAI,QAAA,IAAY,qBAAqB,CAAC,QAAQ,CAAC,EAAE;AACvD,QAAQ,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE,qBAAqB,CAAC,QAAQ,CAAA,EAAY;AAClF;AACA;AACA;;AAEA,EAAE,IAAI,iBAAiB,CAAC,IAAA,GAAO,CAAC,EAAE;AAClC,IAAI,MAAM,MAAM,GAAiB,EAAE;AACnC,IAAI,KAAK,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAA,IAAK,iBAAiB,CAAC,OAAO,EAAE,EAAE;AACrE,MAAM,MAAM,CAAC,IAAI,CAAC;AAClB,QAAQ,IAAI,EAAE,WAAW;AACzB,QAAQ,SAAS;AACjB,QAAQ,QAAQ;AAChB,OAAO,CAAC;AACR;AACA,IAAI,KAAK,CAAC,UAAA,GAAa,EAAE,QAAQ;AACjC;AACA;;AAEA,SAAS,sBAAsB;AAC/B,EAAE,eAAe;AACjB,EAAE,OAAO;AACT,EAAS;AACT,EAAE,MAAM,aAAA,GAAgB,OAAO,CAAC,eAAe,CAAC;;AAEhD,EAAE,OAAO;AACT,IAAI,SAAS,EAAE;AACf,MAAM,MAAM,EAAE;AACd,QAAQ;AACR,UAAU,IAAI,EAAE,kBAAkB;AAClC,UAAU,KAAK,EAAE,CAAC,gCAAgC,EAAE,SAAS,CAAC,GAAG,CAAC;AAClE,UAAU,UAAU,EAAE,EAAE,MAAM,EAAE,kBAAkB,CAAC,aAAa,EAAE,MAAM,CAAA,EAAG;AAC3E;AACA,UAAU,SAAS,EAAE,EAAE,IAAI,EAAE,OAAO;AACpC,UAAU,SAAS,EAAE,eAAe;AACpC,SAAS;AACT,OAAO;AACP,KAAK;AACL,IAAI,OAAO,EAAE;AACb,MAAM,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,WAAW,CAAC,KAAK;AACvE,QAAQ,MAAM,OAAA,GAAU,QAAA,KAAa,eAAe;;AAEpD,QAAQ,MAAM,MAAM,GAAW;AAC/B,UAAU,EAAE,EAAE,QAAQ;AACtB,UAAU,IAAI,EAAE,QAAA,KAAa,GAAA,GAAM,MAAA,GAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;AACA,UAAA,OAAA;AACA,UAAA,OAAA,EAAA,IAAA;AACA,UAAA,IAAA,EAAA,QAAA,KAAA,GAAA;AACA,SAAA;;AAEA,QAAA,IAAA,CAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,UAAA,GAAA,EAAA,MAAA,EAAA,kBAAA,CAAA,WAAA,CAAA,MAAA,CAAA,EAAA;AACA;;AAEA,QAAA,OAAA,MAAA;AACA,OAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA;;AAEA,eAAA,cAAA,CAAA,eAAA,EAAA;AACA,EAAA,IAAA,aAAA,EAAA,EAAA;AACA,IAAA;AACA;;AAEA,EAAA,MAAA,OAAA,GAAAC,sCAAA,EAAA;AACA,EAAA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,EAAA,IAAA,CAAA,aAAA,EAAA;AACA,IAAA,GAAA,CAAA,CAAA,yBAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;;AAEA,EAAA,IAAA;AACA,IAAA,MAAA,mBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,OAAA,CAAA;AACA,GAAA,CAAA,OAAA,KAAA,EAAA;AACA,IAAA,GAAA,CAAA,CAAA,4CAAA,EAAA,eAAA,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AACA;;AAEA,EAAA,GAAA,CAAA,eAAA,CAAA;;AAEA,EAAA,MAAA,KAAA,GAAA;AACA,IAAA,QAAA,EAAAC,UAAA,EAAA;AACA,IAAA,QAAA;AACA,IAAA,OAAA;AACA,IAAA,WAAA;AACA,IAAA,IAAA;AACA,IAAA,QAAA,EAAA,MAAA;AACA,IAAA,KAAA,EAAA,OAAA;AACA,IAAA,IAAA;AACA,IAAA,GAAA,sBAAA,CAAA,eAAA,EAAA,OAAA,CAAA;AACA,GAAA;;AAEA,EAAA,MAAA,cAAA,GAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,CAAA,GAAA,EAAA,WAAA,KAAA;AACA,IAAA,OAAA,EAAA,GAAA,GAAA,EAAA,GAAA,WAAA,CAAA,KAAA,EAAA,WAAA,EAAA;AACA,GAAA,EAAA,EAAA,CAAA;;AAEA,EAAA,cAAA,CAAA,KAAA,EAAA,cAAA,CAAA;;AAEA,EAAA,MAAA,QAAA,GAAAC,wBAAA,CAAA,KAAA,EAAA,GAAA,EAAA,WAAA,EAAA,MAAA,CAAA;AACA;AACA,EAAA,GAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA;;AAEA,EAAA,MAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA,EAAA,MAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA;;AAEA,WAAA,CAAA,YAAA;AACA,EAAA,KAAA,MAAA,CAAA,QAAA,EAAA,IAAA,CAAA,IAAA,MAAA,CAAA,OAAA,CAAAC,uCAAA,EAAA,CAAA,EAAA;AACA,IAAA,IAAA,IAAA,GAAA,SAAA,EAAA;AACA,MAAA,IAAA,gBAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA;AACA,QAAA;AACA;;AAEA,MAAA,GAAA,CAAA,CAAA,yBAAA,EAAA,QAAA,CAAA,cAAA,EAAA,IAAA,CAAA,QAAA,CAAA,CAAA;AACA,MAAA,gBAAA,CAAA,GAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,IAAA;AACA,QAAA,MAAA,cAAA,CAAA,QAAA,CAAA;AACA,OAAA,CAAA,OAAA,KAAA,EAAA;AACA,QAAA,GAAA,CAAA,CAAA,iCAAA,EAAA,QAAA,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AACA;AACA,KAAA,MAAA;AACA,MAAA,gBAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AACA;AACA;AACA,CAAA,EAAA,YAAA,CAAA;;"}